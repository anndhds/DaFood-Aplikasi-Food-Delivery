import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.teal200,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.onSecondaryContainer.withOpacity(1),
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 5,
        space: 5,
        color: colorScheme.onSecondaryContainer.withOpacity(1),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'Yu Gothic UI',
          fontWeight: FontWeight.w300,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(0.58),
          fontSize: 12.fSize,
          fontFamily: 'Yu Gothic UI',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.blueGray80001,
          fontSize: 40.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.red300,
          fontSize: 30.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 25.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.primary.withOpacity(0.7),
          fontSize: 8.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary.withOpacity(0.7),
          fontSize: 18.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary.withOpacity(0.8),
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3F000000),
    primaryContainer: Color(0XFF010F07),
    secondaryContainer: Color(0XFF3F3F3F),

    // Error colors
    errorContainer: Color(0XFF54AA8B),
    onError: Color(0XFFD2ECE8),

    // On colors(text colors)
    onPrimary: Color(0XFF2D264B),
    onPrimaryContainer: Color(0XFF257458),
    onSecondaryContainer: Color(0XBFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFBC31E);

  // BlueGray
  Color get blueGray600 => Color(0XFF498A73);
  Color get blueGray700 => Color(0XFF37755F);
  Color get blueGray800 => Color(0XFF3D405B);
  Color get blueGray80001 => Color(0XFF1F503F);

  // BlueGrayB
  Color get blueGray900B5 => Color(0XB5353333);

  // Cyan
  Color get cyan700 => Color(0XFF1695B1);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFF97B5A);

  // Gray
  Color get gray100 => Color(0XFFEFF8F5);
  Color get gray50 => Color(0XFFFFF7F7);
  Color get gray5001 => Color(0XFFFFF9F9);
  Color get gray5002 => Color(0XFFFCFCFC);

  // Lime
  Color get lime100 => Color(0XFFE6E8B4);

  // Orange
  Color get orange300 => Color(0XFFF8B64C);
  Color get orange500 => Color(0XFFF4970B);
  Color get orange700 => Color(0XFFFB7B05);

  // Pink
  Color get pink200 => Color(0XFFF6A7BA);

  // Red
  Color get red200 => Color(0XFFE6A2A2);
  Color get red20001 => Color(0XFFEA9696);
  Color get red300 => Color(0XFFD26464);
  Color get red30001 => Color(0XFFD26565);
  Color get red50 => Color(0XFFFBF0F0);
  Color get red500 => Color(0XFFEA4335);
  Color get redA100 => Color(0XFFF28482);
  Color get redA10001 => Color(0XFFEA8787);
  Color get redA400 => Color(0XFFFF1D1D);

  // Teal
  Color get teal100 => Color(0XFFB4DED6);
  Color get teal10001 => Color(0XFFB4E7DE);
  Color get teal10002 => Color(0XFFB4E8DE);
  Color get teal200 => Color(0XFF77D4B3);
  Color get teal20001 => Color(0XFF6BCAB9);
  Color get teal300 => Color(0XFF4BA4C0);
  Color get teal400 => Color(0XFF439F8E);

  // Yellow
  Color get yellow100 => Color(0XFFF8FFD3);
  Color get yellow800 => Color(0XFFEEA634);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
